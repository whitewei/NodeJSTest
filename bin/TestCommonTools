var util = require("util");

function Base() {
    this.name = 'base';
    this.base = 1989;
    this.sayHello = () => console.log("hello " + this.name);
}

Base.prototype.showName = () => console.log(this.name);
// Base.prototype.showName = function() {
//     console.log(this.name);
// };
function sub() {
    this.name = 'sub';
}

//是一个实现对象间原型继承 的函数。
//Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。
util.inherits(sub, Base);
var objBase = new Base();
objBase.showName();
objBase.sayHello();
console.log(objBase);

var objSub = new sub();
objSub.showName();
//objSub.sayHello();
console.log(objSub);

//是一个将任意对象转换 为字符串的方法,它至少接受一个参数 object，即要转换的对象。
// util.inspect(object,[showHidden],[depth],[colors])

function Person() {
    this.name = 'byvoid';
    this.toString = function () {
        return this.name;
    };
}

var person = new Person();
console.log(util.inspect(person));
console.log(util.inspect(person, true,2,true));

